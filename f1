LAB INTERNAL
-----------------------------------------------------------------------
GIT CLONING

-> Create a repositiory

git clone https://github.com/RahulGuptaMaddala/exp1.git

cd exp1

nano ex1

git status

git add ex1

git status

git config --global user.name "RahulGuptaMaddala"

git config --global user.email "rahulguptamaddala3@gmail.com"

git commit -m "FirstCommit"

git push
-------------------------------------------------------------------------
GIT-LOCAL REPOSITORY

cd ..

mkdir ex2

cd ex2

git init

nano m1

git status

git add m1

git status

git commit -m "FirstCommit"

git remote add origin https://github.com/RahulGuptaMaddala/new.git

git push origin master
----------------------------------------------------------------------------
PULL

cd ..

mkdir goat

cd goat

git init

git branch -m master main

git remote add origin https://github.com/RahulGuptaMaddala/new.git

git pull origin main
---------------------------------------------------------------------------
FETCH

---------------------------------------------------------------------------
MERGE

mkdir cat

cd cat

git init

git branch -m master main

git remote add origin https://github.com/RahulGuptaMaddala/new4.git

git pull origin main

git checkout -b newb

nano f1

git status

git add f1

git status

git commit -m "FirstCommit"

git checkout main

git merge newb 

git push origin main
---------------------------------------------------------------------------
REBASE 

git checkout -b newb2

nano b2

git status

git add b2

git status

git commit -m "FirstCommit"

git checkout main

git merge newb 

git push origin main

----------------------------------------------------------------------------
----------------------------------------------------------------------------
To change the name 
sudo su 
nano /etc/hostname

after changing the name in the nano editor click
ctrl+o
enter
ctrl+x

now we have to restart the system 
init 6
-------------------------------------------------------------------------
Now we have to install the 
GIT,JDK,TOMCAT,MAVEN
-------------------------------------------------------------------------
GIT

-> now we have change the path to root user
	sudo su
-> Check the updates
	yum update
-> Command to install git
	yum install git
-> To check the version 
	git --version
--------------------------------------------------------------------------
JDK

-> Command to install JDK
	yum install java-17-amazon-corretto-devel
-> To check the version 
	javac --version
-> now we have to set the environmental variables in root user
	nano .bashrc
	-> In this file add the below line
		export JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto
-> To set the environmental variables immediately we use the below command
	source .bashrc
-> to change from root user to ec2-user 
	exit
-> now we have to set the environmental variables in ec2-user
	nano .bashrc
	-> In this file add the below line
		export JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto
-> To set the environmental variables immediately we use the below command
	source .bashrc
--------------------------------------------------------------------------------------------------------------------

MAVEN  

-> Change to root user
	sudo su
-> We have to install the tomcat in the "opt" directory
	cd /opt
-> Command to install maven
	wget https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz
-> To check if tomcat is installed or not
	ls -a
-> To extract the files from .gz 
	tar -xvzf apache-maven-3.9.9-bin.tar.gz
-> Now we have change the name of the maven 
	mv apache-maven-3.9.9 maven
-> To check the name is changed or not 
	ls -a
-> To check the version of the maven
	maven/bin/mvn -v
-> Now we have to change to another directory
	cd /home/ec2-user
-> now we have to set the environmental variables in root user
	nano .bashrc
	-> In this file add the below line
		export M2_HOME=/opt/maven
		export M2=/opt/maven/bin
		export PATH=$PATH:$M2
-> To set the environmental variables immediately we use the below command
	source .bashrc
-> to change from root user to ec2-user 
	exit
-> now we have to set the environmental variables in ec2-user
	nano .bashrc
	-> In this file add the below line
		export M2_HOME=/opt/maven
		export M2=/opt/maven/bin
		export PATH=$PATH:$M2
-> To set the environmental variables immediately we use the below command
	source .bashrc
-> Now we have to change to another directory in root user 
	sudo su
	cd ~ 
-> now we have to set the environmental variables in root user
	nano .bashrc
	-> In this file add the below line
		export M2_HOME=/opt/maven
		export M2=/opt/maven/bin
		export PATH=$PATH:$M2
-> To set the environmental variables immediately we use the below command
	source .bashrc
-------------------------------------------------------------------------------------------------------

TOMCAT 

-> Change to root user
	sudo su
-> We have to install the tomcat in the "opt" directory
	cd /opt
-> Command to install tomcat
	wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.98/bin/apache-tomcat-9.0.98.tar.gz
-> To check if tomcat is installed or not
	ls -a
-> To extract the files from .gz 
	tar -xvzf apache-tomcat-9.0.96.tar.gz
-> Now we have change the name of the tomcat 
	mv apache-tomcat-9.0.96 tomcat
-> To check the name is changed or not 
	ls -a
-> Create shortcuts for startup.sh and shutdown.sh files
	ln -s /opt/tomcat/bin/startup.sh /usr/bin/tomcatstart
	ln -s /opt/tomcat/bin/shutdown.sh /usr/bin/tomcatstop
-> For checking the shortcuts we have to start the tomcat and stop the tomcat
	tomcatstart
	tomcatstop
-> Now we have to edit the context.xml so we have to find the path of the  file
	find / -name context.xml
-> Here we open and edit the host manager file and manager file in the nano editor (Last 2 links)
	nano /opt/tomcat/webapps/host-manager/META-INF/context.xml (comment the valve tag)
	nano /opt/tomcat/webapps/manager/META-INF/context.xml (comment the valve tag)
-> To access the manager app we have to define some users in tomcat-users.xml file 
-> To find the path of the tomcat-users.xml file
	find / -name tomcat-users.xml
-> Now we have to edit the file in the directory given as output for the above command
	nano /opt/tomcat/conf/tomcat-users.xml
-> Now we have to add the below lines in the xml file
	<role rolename="manager-gui"/>
	<role rolename="manager-script"/>
	<role rolename="manager-jmx"/>
	<role rolename="manager-status"/>
	<user username="admin" password="admin" roles="manager-gui, manager-script, manager-jmx, manager-status"/>
	<user username="deployer" password="admin" roles="manager-script"/>
	<user username="tomcat" password="tomcat" roles="manager-gui"/>
-> Now to check the tomcat is working or now we use the below steps
	1. tomcatstart
	2. In ec2-instance click on security in the bottom 
	3. click on security group 
	4. Click on edit inbound rules 
	5. Click on add rule
	6. Change the port to 8080
	7. Change the source to anywhere-ipv4 
	8. Enter the public ip address:8080 in the chrome 
	9. Click on the manager app 
	10. Enter the username and password as admin

----------------------------------------------------------------------------------------------------------------------

Now we have to install the 
JENKINS

-> Do the Eclipse before installing the jenkins

-> Now we have to change to the ec2-user (root)
	cd /home/ec2-user
-> Command to install the Jenkins package
	wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
-> Now importing the Jenkins key
	rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
-> Now  install the Jenkins
	yum install Jenkins
-> Now we have to enable the Jenkins
	systemctl enable Jenkins
-> Now we will start the Jenkins
	systemctl start Jenkins
	-> If any error is present then we have to reconnect to the system
-> Now we have to add the 9090 port number
	1. In ec2-instance click on security in the bottom 
	2. click on security group 
	3. Click on edit inbound rules 
	4. Click on add rule
	5. Change the port to 9090
	6. Change the source to anywhere-ipv4 
-> Now we have to change the port number of tomcat from 8080 to 9090.
	1.cd /opt/tomcat/conf
	2.ls -a
	3.nano server.xml
	4.In the connector tag we change the port number to 9090
-> Now open the public ip address:8080 in chrome to use the Jenkins
-> To get the admin password copy the output path and run the below command 
	cat  /var/lib/jenkins/secrets/initialAdminPassword
-> Select pluging to install -> install -> enter u r deatils -> save and continue -> save and finish -> start using Jenkins

-> Installing required Plugins (GitHub and Maven and Publish Over ssh)
-> Configuring JDK Git Maven
---------------------------------------------------------------------------------------------------------------------------

Exp - 7

-->In Docker Instance
open cmd
sudo su
yum install docker -y
service docker start
cd /opt
ls -a
mkdir docker
cd docker

->Creating a docker file
nano dockerfile
enter the below 2 lines in the file 
FROM tomcat:latest
RUN cp -R /usr/local/tomcat/webapps.dist/* /usr/local/tomcat/webapps/

->Bulding an image
docker build -t mtomcat .

->Creating a container
docker run -d --name mtomcat-container -p 8082:8080 mtomcat

->
docker start mtomcat-container
docker exec -it mtomcat-container /bin/bash
cd webapps
mkdir sam
cd sam
touch index.jsp
echo y21acs498-DOCKER > index.jsp

->Now open the instance security and click on the security group link
->Now click  on edit inbound rules
->Click on add rule
->Now add 8080-8090 and source to anywhere from ipv4.
->Copy the public ip address of the docker instance
->Past it in the browser along with :8082
->Now apache tomcat will comes 
->Now, add the /sam to the same url.
->Then you can see the y21acs498-Docker as a output.
------------------------------------------------------------------------------------------------------

->open the terminal
exit
cd /home/ec2-user

->Adding the docker admin to the docker group
useradd dockeradmin
passwd dockeradmin
usermod -aG docker dockeradmin

nano /etc/ssh/sshd_config
In the nano file 
->change the password authentication to yes

->Reloading the file
service sshd reload

->checking if the dockeradmin is working or not
su dockeradmin
Enter the password
exit
sudo su
cd /opt
ls

->Changing the permissions
chown -R dockeradmin:dockeradmin docker
ls -l
cd docker

->To check the images
docker ps -a

->Now add a line in the dokcerfile
nano dockerfile
COPY ./*.war /usr/local/tomcat/webapps/
--------------------------------------------------------------------------
Exp - 8

-->In Docker Instance
sudo su
service docker start

-->In jenkines Instance 
open the cmd 
systemctl start Jenkins

copy the public ip address of jenkins 
past the ip address in the browser along with :8080
Now sign with username and password

Click on Manage Jenkins
Click on the system and scroll down until we get SSH Server
In SSH Server enter the details 
In hostname give the docker private ip address
username -> dockeradmin
Remote->//opt//docker


Now click on the advance 
Check on the Passwords
Now Enter the dockeradmin password
Click on apply and save

Now go to Dashboard
Click on New Item
Provide Item Name
Click on MavenProject
Select ok

Now in Source Code Management
Select git
Paste the MavenProject repository url
Now change the branch to main

In build Environments 
Enter the below line in Goles and options
clean install

Go to the post build actions
click on add post-build actions
Click on Send build artificates over ssh
Source files -> target/*.war
Remove prefix -> target
Remote directory -> //opt//docker
Exec command ->
cd /opt/docker;
docker build -t dtomcat .;
docker container stop dtomcat_container;
docker container rm dtomcat_container;
docker run -d --name dtomcat_container -p 8085:8080 dtomcat;

Click on apply and save

Now we can build our project

Now we can check output in 4 ways
1) Go to console output
2) In Docker cmd enter the below cmds 
docker images
dokcer ps
4)Copy the docker public ip address
Enter the ip address in chrome alone with :8085/FirstMavenProject
-----------------------------------------------------------------------------------------
Exp - 9
ANSIBLE-DOCKER

-->In Ansible Instance cmd-
sudo su
yum install ansible -y
exit

->Now generate key pairs
ssh-keygen

->To check if the keys are generated are not
cd .ssh
ls -l
cd ..

->Now copy the private ip address of the docker instance

ssh-copy-id dockeradmin@docker private ip


-->In Docker Instance cmd-
sudo su
visudo
Now a nano file will open 
in that we add the below line uder the root
dockeradmin,ALL=(ALL),NOPASSWD: ALL

->Now reload the sshd
service sshd reload

->Edit the inbound rules of docker instance (8080-8090) (80)

->To show the content of authorized_keys file.
sudo su dockeradmin
cd ~
cd .ssh
ls -l
cat authorized_keys


-->In Ansible Instance cmd-
In ec2-user

->Creation of playbook
nano nginx-setup.yml
write the below lines in the nano file
---
- name: Install Nginx on managed node
  hosts: dockerhost
  become: true
  tasks:
   - name: Install Nginx
     yum:
      name: nginx
      state: present
   - name: Start and enable nginx
     service:
      name: nginx
      state: started
      enabled: true
...

sudo su
nano /etc/ansable/hosts
Now add the below lines in the nano file
[dockerhost]
dockerprivateip ansible_user=dockeradmin ansible_ssh_private_key_file=/home/ec2-user/.ssh/id_rsa

ansible-playbook nginx-setup.yml --syntax --check
ansible-playbook nginx-setup.yml

->Now copy the public ip address of the docker
Paste the ip address in the chrome along with the :80
Now a welcome page will be comes 


ANSIBLE-JENKINS-DOCKER
---------------------- 

-->In ansible instance cmd-
sudo su
useradd ansadmin
passwd ansadmin

visudo
now write the below lines in the nano file
asadmin,ALL=(ALL),ALL

service sshd reload

->Enable password authentication
nano /etc/ssh/sshd_config
Change the PasswordAuthentication to yes

->Now reload the sshd
service sshd reload

->changing to ansadmin
sudo su ansadmin

->Generating keypair
ssh-keygen

-->In Docker Instance cmd-
sudo su
useradd ansadmin
passwd ansadmin

visudo 
now add the below lines in the nano file
asadmin,ALL=(ALL),ALL

->Enable password authentication
nano /etc/ssh/sshd_config
Change the PasswordAuthentication to yes


-->In ansible instance cmd-
sudo su
nano /etc/ansible/hosts
add the below lines in the nano file
[dockerhost]
docker private ip

sudo su ansadmin
ssh-copy-id dokcerprivateip

->Test the connection
ansible all -m ping
ansible all -m command -a uptime
exit

->Install docker in ansible instance and start docker
yum install docker
usermod -aG docker ansadmin
id ansadmin
service docker start

->create a new docker directory and modify the permissions of it to ansadmin user.
cd /opt
mkdir docker
ls -l
chown -R ansadmin:ansadmin docker
ls -l

->Create a new dockerfile in docker directory
cd docker
nano dockerfile
Now add the below lines in the nano file
FROM tomcat:latest
RUN cp -R /usr/local/tomcat/webapps.dist/* /usr/local/tomcat/webapps/
COPY ./*.war /usr/local/tomcat/webapps/

->Add ansible instance ip address to hosts
nano /etc/ansible/hosts
Write the below lines in the nano file
[dockerhost]
docker private ip
[ansiblehost]
ansible private ip

->Go to ansadmin
sudo su ansadmin
ssh-copy-id ansibleprivateip

->Test the connection
ansible all -m ping

-->In Docker Instance cmd-
In ec2-user root        

->Login to docker hub in cmd
docker login

-->In Ansible Instance cmd-

->Login to docker hub in cmd
docker login

->Create a new playbook
nano heloworld.yml
Write the below lines in the nano file 
---
- hosts: ansiblehost

  tasks:
  - name: create docker image
    command: docker build -t helloworld:latest .
    args:
      chdir: /opt/docker

  - name: create tag to push onto dockerhub
    command: docker tag helloworld:latest rahulguptamaddala/helloworld:latest

  - name: push docker image
    command: docker push rahulguptamaddala/helloworld:latest

...


->Check the syntax of the playbook
ansible-playbook helloworld.yml --syntax --check

->Create a new playbook which is used to create a new container
nano deploy_helloworld.yml
Now write the below lines in the nano file
---
- hosts: dockerhost

  tasks:
  - name: create container
    command: docker run -d --name helloworld_container -p 8082:8080 rahulguptamaddala/helloworld:latest

...

->Check the syntax of the playbook
ansible-playbook deploy_helloworld.yml --syntax --check
ls -l

-->In Docker Instance cmd-
Permissions of docker.sock file in run directory
chmod 777 /var/run/docker.sock

-->In Jenkins Instance cmd-
sudo su
systemctl Jenkins start
login to the Jenkins in chrome

->Now go to 
Dashboard-> Manage jenkins-> System
Go to ssh server
click on add
Name -> Ansible
hostname -> ansible private ip adress
username -> ansadmin
check in the check box and give the password of the ansadmin
click on apply and save

->Now create a new item in Jenkins
Enter item name
select maven project
click on ok

now go to configure -> general
description -> Deploy to Snsible

->Select source code management
select git 
repository link -> MavenProject.git url
change the branch name to main

->Click on Build Environments
Goals and options -> clean install

->Click on post build actions 
Select on add post build actions
Select on send build artificates over ssh
Source files -> target/*.war
Remove prefix -> target
Remote directory -> //opt//docker
Exec command ->
ansible-playbook /opt/docker/helloworld.yml;
sleep 10;
ansible-playbook /opt/docker/deploy_helloworld.yml;

->Click on apply and save

->Now build the project file
After successfully executed we check the console output

In the chrome login to docker hub account and check the repository is created or not

Copy the public ip of the docker instance 
In the chrome 
ipadress of docker along with :8082/FirstMavenProject

Before building the 2nd time 
In the docker instance 
docker container stop helloworld_container
docker container rm helloworld_container
------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------
java-17-amazon-corretto-devel
export JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto

https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.96/bin/apache-tomcat-9.0.96.tar.gz
<role rolename="manager-gui"/>
<role rolename="manager-script"/>
<role rolename="manager-jmx"/>
<role rolename="manager-status"/>
<user username="admin" password="admin" roles="manager-gui, manager-script, manager-jmx, manager-status"/>
<user username="deployer" password="admin" roles="manager-script"/>
<user username="tomcat" password="tomcat" roles="manager-gui"/>

https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz
export M2_HOME=/opt/maven
export M2=/opt/maven/bin
export PATH=$PATH:$M2

wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
 
